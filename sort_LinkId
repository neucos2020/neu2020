#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MCGETCHAR(data)(*((char*)(data)))
#define MCGETSHORT(data)((unsigned short)((((unsigned short)(*((char*)(data))))<<8)|(((unsigned short)(*((char*)(data)+1)))&0x00ff)))
#define MCGETLONG(data)((((unsigned long)MCGETSHORT((data)))<<16)|(((unsigned long)MCGETSHORT((char*)(data)+2))&0x0000ffff))
#define MCGET3BN(data)((((unsigned long)MCGETCHAR((data)))<<16)|(((unsigned long)MCGETSHORT((char*)(data+1))&0x0000ffff))
#define Length 60000
#define Addition 1000
class lms
{private:
    typedef struct {
        int LinkId;
        int flag;
        int brunch;
        int disclass;
        char* roadname;

    }LandMark,*LM;
public:
    typedef  int (*FP)(LM a, LM b);  //定义类型
    lms();
    void print();
    void sift(LM*r,int length);//堆调整
    void heapsort(LM*r,int length);//堆排序
    int length;
    LM* base;
   inline int cmp1(LM p,LM q);//按照LinkId比较
    inline int cmp2(LM p,LM q);//按照disclass比较
     FP fp[2];
};
lms::lms()
{
    int m;
    int i=0;//循环量
    char aclinkId[4];
    char acroadnamesize[2];
    char acNodeInfo[4];
    unsigned short ustotalsize;
    unsigned long ullinkId;
    unsigned short usroadnamesize;
    char actotalsize[2];
this->base=(LM*)malloc(sizeof(LM)*Length);
    this->length=Length;
    FILE*pfp=fopen("G://Pr\\GTBL.dat","rb");
    if(pfp==NULL)
    {
    printf("can not open the GTBL.DAT file or there is no the file!\n");system("pause");
    return ;
    }
    printf("\n\n\t\t\t\t导入成功\n");

    while(fread(actotalsize,sizeof(actotalsize),1,pfp)==1)
    {
        if(i==this->length){
        this->base=(LM*)realloc(this->base,(this->length+Addition)*sizeof(LM));
        if(! this->base){printf("内存不足\n");exit(1);}
            this->length+=Addition;
        }
    fread(aclinkId,sizeof(aclinkId),1,pfp);
    fread(acroadnamesize,sizeof(acroadnamesize),1,pfp);
    fread(acNodeInfo,sizeof(acNodeInfo),1,pfp);
    ustotalsize=MCGETSHORT(actotalsize);
    ullinkId=MCGETLONG(aclinkId);
    usroadnamesize=MCGETSHORT(acroadnamesize);
    m=(int)acNodeInfo[3]&255;
    char roadname[30];
    fread(roadname,sizeof(char),ustotalsize-12,pfp);
   this->base[i]=(LM)malloc(sizeof(LandMark));
   if(! this->base[i]){printf("内存不足\n");exit(2);}
    this->base[i]->brunch=(m&112)/16;
    this->base[i]->disclass=m&15;
    this->base[i]->flag=(m&128)/128;
    this->base[i]->LinkId=ullinkId;
    this->base[i]->roadname=(char*)malloc(30*sizeof(char));
    if(! this->base[i]->roadname){printf("内存不足\n");exit(3);}
   strcpy( this->base[i]->roadname,roadname+4);
   i++;
    }
    this->length=i;
    for(int j=this->length-1;j>=i;j--){
          free(this->base[j]->roadname);
        free(this->base[j]);
    }
    fclose(pfp);
}
void lms::print(){
    for(int i=0;i<this->length;i++){
        printf("LinkId:%d flag:%d brunch:%d disclass:%d roadname:%s\n",this->base[i]->LinkId,this->base[i]->brunch, this->base[i]->brunch,this->base[i]->disclass,this->base[i]->roadname);
    }
}
 inline int lms:: cmp1(LM p,LM q){
    if(p->LinkId>q->LinkId)return 1;
    else if(p->LinkId==q->LinkId) return 0;
    else return -1;
}

 inline int lms:: cmp2(LM p,LM q){
    if(p->LinkId>q->disclass)return 1;
    else if(p->LinkId==q->disclass) return 0;
    else return -1;
}
void  lms:: sift(LM*r,int length)//堆调整:化成大根堆
{
    int start=length/2;//开始调整的节点
    int i,j;
   LM temp;
    for(i=start;i>=1;i--){
    j=i;
    while(2*j+1<=length){//左右子树都有
    if(cmp1(r[2*j-1],r[j-1])==1&&cmp1(r[2*j-1],r[2*j])!=-1){
    temp=r[2*j-1];r[2*j-1]=r[j-1];r[j-1]=temp;
    j=2*j;
    }
    else if(cmp1(r[2*j],r[j-1])==1&&cmp1(r[2*j],r[2*j-1])!=-1){
    temp=r[2*j];r[2*j]=r[j-1];r[j-1]=temp;
    j=2*j+1;
    }
    else break;//停止更新
    }
    if(2*j==length&&cmp1(r[2*j-1],r[j-1])==1){//只有左子树
    temp=r[2*j-1];r[2*j-1]=r[j-1];r[j-1]=temp;
    }
    }
}
void  lms:: heapsort(LM*r,int length)//堆排序
{
    LM temp;
    for(int i=length;i>1;i--){
    sift(r,i);
    temp=r[0];
    r[0]=r[i-1];
    r[i-1]=temp;
    }
}
int main(int argc, char *argv[])
{
   /* QApplication a(argc, argv);
    MainWindow w;
    w.show();*/
    lms s;//s.print();
   s.heapsort(s.base,20000);
 //s.print();
//s.~lms();
    //return a.exec();

}

